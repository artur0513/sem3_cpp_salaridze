#ifdef GL_ES 
precision mediump float;
#endif

#extension GL_EXT_gpu_shader4 : enable
#extension GL_ARB_shader_bit_encoding : enable
#extension GL_ARB_gpu_shader5 : enable

uniform sampler2D effect_texture; // Спрайт который рисуем
uniform sampler2D diffuse_texture; // Текстура куда рисуем

uniform vec2 effect_texture_pos; // Координата и размер спрайта эффекта на всей RenderTexture
uniform vec2 effect_texture_size;

uniform vec2 camera_size;
uniform float time; // Просто время

uniform float rise_factor; // коэффициент искажения
uniform float distortion_factor;

#define normalStrength		40.0

vec4 combine_colors(vec4 col1, vec4 col2){ // Наложение цветов с учетом альфа канала
	vec4 ans;
	ans.a = 1.0 - (1.0 - col1.a)*(1.0 - col2.a);
	ans.r = (col1.r * col1.a * (1.0 - col2.a) + col2.r*col2.a)/ans.a;
	ans.g = (col1.g * col1.a * (1.0 - col2.a) + col2.g*col2.a)/ans.a;
	ans.b = (col1.b * col1.a * (1.0 - col2.a) + col2.b*col2.a)/ans.a;
	return ans;
}

vec2 hash( vec2 p ) {
	p = vec2( dot(p,vec2(127.1,311.7)),
			  dot(p,vec2(269.5,183.3)) );

	return -1.0 + 2.0*fract(sin(p) * 43758.5453123);
}

float noise( in vec2 p ) {
    const float K1 = 0.366025404; // (sqrt(3)-1)/2;
    const float K2 = 0.211324865; // (3-sqrt(3))/6;

	vec2 i = floor( p + (p.x+p.y) * K1 );

    vec2 a = p - i + (i.x+i.y) * K2;
    vec2 o = step(a.yx,a.xy);
    vec2 b = a - o + K2;
	vec2 c = a - 1.0 + 2.0*K2;

    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );

	vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));

    return dot( n, vec3(70.0) );
}

float fbm ( in vec2 p ) {
    float f = 0.0;
    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );
    f  = 0.5000*noise(p); p = m*p;
    f += 0.2500*noise(p); p = m*p;
    f += 0.1250*noise(p); p = m*p;
    f += 0.0625*noise(p); p = m*p;
    f = 0.5 + 0.5 * f;
    return f;
}

vec3 bumpMap(vec2 uv) {
    vec2 s = 1. / vec2(128.0);
    float p =  fbm(uv);
    float h1 = fbm(uv + s * vec2(1., 0));
    float v1 = fbm(uv + s * vec2(0, 1.));

   	vec2 xy = (p - vec2(h1, v1)) * normalStrength;
    return vec3(xy + .5, 1.);
}

#define timeScale 			time * 1.0
#define fireMovement 		vec2(-0.01, -0.5)
#define distortionMovement	vec2(-0.01, -0.3)
#define normalStrength		40.0
#define distortionStrength	0.1

void main() {
	// Искажение летящее вверх (thanks to https://github.com/SFML/SFML/wiki/Source%3A-HeatHazeShader)
	// and also thanks to https://greentec.github.io/shadertoy-fire-shader-en/
	vec2 uv = vec2((gl_TexCoord[0].x - effect_texture_pos.x)/effect_texture_size.x, (gl_TexCoord[0].y - effect_texture_pos.y)/effect_texture_size.y);
	vec2 check_coord = vec2((gl_TexCoord[0].x - effect_texture_pos.x)/effect_texture_size.x, mod((gl_TexCoord[0].y - effect_texture_pos.y)/effect_texture_size.y - time*rise_factor, 1.0));
	vec4 sprite_color = texture2D(effect_texture, check_coord);
	
	// Проблема в том, что здесь texCoord походу все таки отнсительно всей текстуры. Поэтому нужно все шейдеры перепроверить
	
	vec2 distortion_offset = (sprite_color.rg*2.0 - vec2(1.0))*distortion_factor*(0.5-abs(0.5 - (gl_TexCoord[0].y - effect_texture_pos.y)/effect_texture_size.y)); // Полученные смещение должно быть в мировых координатах
	distortion_offset *= smoothstep(0.0, 0.5, 0.5 - pow((0.5-uv.x)*(0.5-uv.x)*1.8 + (0.5-uv.y)*(0.5-uv.y)*0.3,0.5))*2.0;
	
	vec4 back_color = texture2D(diffuse_texture, gl_TexCoord[0].xy + distortion_offset/camera_size);
	
	uv += distortion_offset*0.3;
    vec3 normal = bumpMap(uv * vec2(1.0, 0.3) + distortionMovement * timeScale);
    vec2 displacement = clamp((normal.xy - .5) * distortionStrength, -1., 1.);
    uv += displacement;

    vec2 uvT = (uv * vec2(1.0, 0.5)) + fireMovement * timeScale;
    float n = pow(fbm(8.0 * uvT), 1.0);

    float gradient = pow(1.0 - uv.y, 2.0) * 5.;
    float finalNoise = n * gradient * smoothstep(0.0, 0.5, 0.5 - pow((0.5-uv.x)*(0.5-uv.x)*1.65 + (0.5-uv.y)*(0.5-uv.y)*0.65,0.5));

    vec4 color = finalNoise * vec4(2.*n, 2.*n*n*n, n*n*n*n, n*1.5);
    gl_FragColor = combine_colors(back_color, color);
	
}